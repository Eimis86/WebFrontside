/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    readonly '/api/admin/user/{id}': {
        readonly get: {
            readonly parameters: {
                readonly path: {
                    readonly id: string;
                };
            };
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['AdminUserResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
        };
        readonly put: {
            readonly parameters: {
                readonly path: {
                    readonly id: string;
                };
            };
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['AdminOperationResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AdminUserRequest'];
                };
            };
        };
        readonly delete: {
            readonly parameters: {
                readonly path: {
                    readonly id: string;
                };
            };
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['AdminOperationResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
        };
    };
    readonly '/api/admin/user/list': {
        readonly get: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['AdminUserListResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
        };
    };
    readonly '/api/admin/user/listUnprocessed': {
        readonly get: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['AdminUserListResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
        };
    };
    readonly '/api/admin/user/create': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['AdminOperationResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AdminUserRequest'];
                };
            };
        };
    };
    readonly '/api/auth/signup': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['SignupResponse'];
                    };
                };
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['SignupRequest'];
                };
            };
        };
    };
    readonly '/api/auth/resendemail': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['ResendEmailResponse'];
                    };
                };
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['ResendEmailRequest'];
                };
            };
        };
    };
    readonly '/api/auth/emailconfirm': {
        readonly get: {
            readonly parameters: {
                readonly query: {
                    readonly email?: string;
                    readonly hash?: string;
                };
            };
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['SignupResponse'];
                    };
                };
            };
        };
    };
    readonly '/api/auth/validateToken': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['LoginResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['ValidateTokenRequest'];
                };
            };
        };
    };
    readonly '/api/auth/login': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['LoginResponse'];
                    };
                };
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['LoginRequest'];
                };
            };
        };
    };
    readonly '/api/auth/emailCheck': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['CheckEmailResponse'];
                    };
                };
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['CheckEmailRequest'];
                };
            };
        };
    };
    readonly '/api/auth/renewJwt': {
        /** Requires JWT Auth */
        readonly get: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['LoginResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
        };
    };
    readonly '/api/auth/getresetlink': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['ResetLinkResponse'];
                    };
                };
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['ResetLinkRequest'];
                };
            };
        };
    };
    readonly '/api/auth/resetpincheck': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['ResetPinCheckResponse'];
                    };
                };
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['ResetPinCheckRequest'];
                };
            };
        };
    };
    readonly '/api/auth/resetpassword': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['ResetPasswordResponse'];
                    };
                };
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['ResetPasswordRequest'];
                };
            };
        };
    };
    readonly '/api/auth/profile/{id}': {
        readonly get: {
            readonly parameters: {
                readonly path: {
                    readonly id: string;
                };
            };
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['ProfileResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
        };
    };
    readonly '/api/auth/profile/my': {
        readonly get: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['ProfileResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
        };
        readonly put: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['ProfileResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
            readonly requestBody: {
                readonly content: {
                    readonly 'application/json': components['schemas']['ProfileRequest'];
                };
            };
        };
    };
    readonly '/api/auth/profile/myImage': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['ProfileResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
        };
        readonly delete: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['ProfileResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
        };
    };
    readonly '/api/auth/profile/myImageBase64': {
        readonly post: {
            readonly responses: {
                /** Success */
                readonly 200: {
                    readonly content: {
                        readonly 'application/json': components['schemas']['ProfileResponse'];
                    };
                };
                /** Unauthorized */
                readonly 401: unknown;
            };
        };
    };
};

export type components = {
    readonly schemas: {
        readonly AdminOperationResponse: {
            readonly data?: components['schemas']['AdminOperationResponseData'];
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly AdminOperationResponseData: {
            readonly success?: boolean;
            readonly message?: string | null;
        };
        readonly AdminUserListResponse: {
            readonly data?:
                | readonly components['schemas']['AdminUserResponseData'][]
                | null;
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly AdminUserRequest: {
            readonly data?: components['schemas']['AdminUserRequestData'];
        };
        readonly AdminUserRequestData: {
            readonly email?: string | null;
            readonly name?: string | null;
            readonly password?: string | null;
            readonly isEmailValidated?: boolean;
            readonly isBlocked?: boolean;
            readonly isAdmin?: boolean;
            readonly isManuallyApproved?: boolean;
        };
        readonly AdminUserResponse: {
            readonly data?: components['schemas']['AdminUserResponseData'];
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly AdminUserResponseData: {
            /** Format: uuid */
            readonly id?: string;
            readonly email?: string | null;
            readonly name?: string | null;
            /** Format: int32 */
            readonly passwordResetPin?: number;
            /** Format: date-time */
            readonly passwordResetDate?: string;
            readonly isEmailValidated?: boolean;
            readonly isBlocked?: boolean;
            readonly isAdmin?: boolean;
            readonly isManuallyApproved?: boolean;
            /** Format: date-time */
            readonly signupDate?: string;
            readonly signupSource?: components['schemas']['SignupSourceType'];
            readonly signupIP?: string | null;
            /** Format: date-time */
            readonly lastLoginDate?: string;
        };
        readonly BaseRequestData: {readonly [key: string]: unknown};
        readonly BaseResponseData: {readonly [key: string]: unknown};
        readonly CheckEmailRequest: {
            readonly data?: components['schemas']['CheckEmailRequestData'];
        };
        readonly CheckEmailRequestData: {
            readonly email?: string | null;
        };
        readonly CheckEmailResponse: {
            readonly data?: components['schemas']['CheckEmailResponseData'];
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly CheckEmailResponseData: {
            readonly result?: components['schemas']['CheckEmailResultEnum'];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        readonly CheckEmailResultEnum:
            | 'Unknown'
            | 'NotActivated'
            | 'Locked'
            | 'NotFound'
            | 'NotModerated'
            | 'EmailInvalid'
            | 'Exists';
        readonly LoginData: {
            readonly email?: string | null;
            readonly password?: string | null;
            readonly passwordHash?: string | null;
        };
        readonly LoginRequest: {
            readonly data?: components['schemas']['LoginData'];
        };
        readonly LoginResponse: {
            readonly data?: components['schemas']['LoginResponseData'];
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly LoginResponseData: {
            readonly result?: components['schemas']['LoginResultEnum'];
            readonly passwordHash?: string | null;
            readonly name?: string | null;
            readonly isAdmin?: boolean;
            readonly jwtToken?: string | null;
            /** Format: date-time */
            readonly jwtTokenValidity?: string;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        readonly LoginResultEnum:
            | 'Unknown'
            | 'Success'
            | 'NotActivated'
            | 'BadPassword'
            | 'Locked'
            | 'NotFound'
            | 'NotModerated'
            | 'EmailInvalid';
        readonly ProfileRequest: {
            readonly data?: components['schemas']['ProfileRequestData'];
        };
        readonly ProfileRequestData: {
            readonly email?: string | null;
            readonly name?: string | null;
            readonly newPassword?: string | null;
            readonly oldPassword?: string | null;
        };
        readonly ProfileResponse: {
            readonly data?: components['schemas']['ProfileResponseData'];
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly ProfileResponseData: {
            /** Format: uuid */
            readonly id?: string;
            readonly email?: string | null;
            readonly name?: string | null;
            readonly isEmailValidated?: boolean;
            readonly isBlocked?: boolean;
            readonly isAdmin?: boolean;
            readonly isManuallyApproved?: boolean;
            /** Format: date-time */
            readonly signupDate?: string;
            readonly signupSource?: components['schemas']['SignupSourceType'];
            readonly signupIP?: string | null;
            /** Format: date-time */
            readonly lastLoginDate?: string;
            readonly imageUrl?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        readonly ResendEmailEnum:
            | 'Unknown'
            | 'Success'
            | 'TooOften'
            | 'NotFound';
        readonly ResendEmailRequest: {
            readonly data?: components['schemas']['ResendEmailRequestData'];
        };
        readonly ResendEmailRequestData: {
            readonly email?: string | null;
        };
        readonly ResendEmailResponse: {
            readonly data?: components['schemas']['ResendEmailResponseData'];
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly ResendEmailResponseData: {
            readonly result?: components['schemas']['ResendEmailEnum'];
        };
        readonly ResetLinkRequest: {
            readonly data?: components['schemas']['ResetLinkRequestData'];
        };
        readonly ResetLinkRequestData: {
            readonly email?: string | null;
        };
        readonly ResetLinkResponse: {
            readonly data?: components['schemas']['ResetLinkResponseData'];
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly ResetLinkResponseData: {
            readonly result?: components['schemas']['ResetLinkResultEnum'];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        readonly ResetLinkResultEnum:
            | 'Unknown'
            | 'Success'
            | 'Locked'
            | 'NotFound'
            | 'TooOften';
        readonly ResetPasswordData: {
            readonly email?: string | null;
            /** Format: int32 */
            readonly pin?: number;
            readonly password?: string | null;
        };
        readonly ResetPasswordRequest: {
            readonly data?: components['schemas']['ResetPasswordData'];
        };
        readonly ResetPasswordResponse: {
            readonly data?: components['schemas']['ResetPasswordResponseData'];
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly ResetPasswordResponseData: {
            readonly result?: components['schemas']['ResetPasswordResultEnum'];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        readonly ResetPasswordResultEnum:
            | 'Unknown'
            | 'Success'
            | 'NotFound'
            | 'NotValid'
            | 'Expired'
            | 'PasswordNotStrong';
        readonly ResetPinCheckData: {
            readonly email?: string | null;
            /** Format: int32 */
            readonly pin?: number;
        };
        readonly ResetPinCheckRequest: {
            readonly data?: components['schemas']['ResetPinCheckData'];
        };
        readonly ResetPinCheckResponse: {
            readonly data?: components['schemas']['ResetPinCheckResponseData'];
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly ResetPinCheckResponseData: {
            readonly result?: components['schemas']['ResetPinCheckResultEnum'];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        readonly ResetPinCheckResultEnum:
            | 'Unknown'
            | 'Success'
            | 'NotFound'
            | 'NotValid'
            | 'Expired';
        readonly SignupData: {
            readonly email?: string | null;
            readonly name?: string | null;
            readonly password?: string | null;
        };
        readonly SignupRequest: {
            readonly data?: components['schemas']['SignupData'];
        };
        readonly SignupResponse: {
            readonly data?: components['schemas']['SignupResponseData'];
            /** Format: int32 */
            readonly code?: number;
            readonly message?: string | null;
            readonly messageTitle?: string | null;
        };
        readonly SignupResponseData: {
            readonly result?: components['schemas']['SignupResponseResultEnum'];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        readonly SignupResponseResultEnum:
            | 'Success'
            | 'AlreadyExists'
            | 'PasswordNotStrong';
        /**
         * Format: int32
         * @enum {integer}
         */
        readonly SignupSourceType:
            | 'NotSet'
            | 'Web'
            | 'Ios'
            | 'Android'
            | 'Manual';
        readonly UserByTokenRequestData: {
            readonly token?: string | null;
        };
        readonly ValidateTokenRequest: {
            readonly data?: components['schemas']['UserByTokenRequestData'];
        };
    };
};

export type operations = {};

export type external = {};

export enum ApiPaths {
    GetApiAdminUser = '/api/admin/user/:id',
    PutApiAdminUser = '/api/admin/user/:id',
    DeleteApiAdminUser = '/api/admin/user/:id',
    GetApiAdminUserList = '/api/admin/user/list',
    GetApiAdminUserListUnprocessed = '/api/admin/user/listUnprocessed',
    PostApiAdminUserCreate = '/api/admin/user/create',
    PostApiAuthSignup = '/api/auth/signup',
    PostApiAuthResendemail = '/api/auth/resendemail',
    GetApiAuthEmailconfirm = '/api/auth/emailconfirm',
    PostApiAuthValidateToken = '/api/auth/validateToken',
    PostApiAuthLogin = '/api/auth/login',
    PostApiAuthEmailCheck = '/api/auth/emailCheck',
    GetApiAuthRenewJwt = '/api/auth/renewJwt',
    PostApiAuthGetresetlink = '/api/auth/getresetlink',
    PostApiAuthResetpincheck = '/api/auth/resetpincheck',
    PostApiAuthResetpassword = '/api/auth/resetpassword',
    GetApiAuthProfile = '/api/auth/profile/:id',
    GetApiAuthProfileMy = '/api/auth/profile/my',
    PutApiAuthProfileMy = '/api/auth/profile/my',
    PostApiAuthProfileMyImage = '/api/auth/profile/myImage',
    DeleteApiAuthProfileMyImage = '/api/auth/profile/myImage',
    PostApiAuthProfileMyImageBase64 = '/api/auth/profile/myImageBase64',
}
